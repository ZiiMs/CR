local ZAM = ZiiM_Admin_Menu
local MenuStatus = false





RegisterCommand('car', function(source, args, rawCommand)
    local ped = GetPlayerPed(PlayerId())
    local car = args[1] or "Panto"
    carhash = GetHashKey(car)
    local color = tonumber(args[2]) or 0
    local seccolor = tonumber(args[3]) or 0
    local pos = GetEntityCoords(ped)
    local heading = GetEntityHeading(ped)
    ZAM:SpawnLocalCar(pos.x, pos.y, pos.z, car, carhash, heading, color, seccolor, true)
end)

RegisterCommand('dv', function(source, args, rawCommand)
    local ped = GetPlayerPed(PlayerId())
    local veh = GetVehiclePedIsIn(ped, false)
    if veh == 0 then
        veh = getNearestVeh()
    end
    print(veh)
    DeleteEntity(veh)
end)

RegisterCommand('menu', function(source, args, rawCommand)
    RageUI.Visible(RMenu:Get('adminmenu', 'main'), not RageUI.Visible(RMenu:Get('adminmenu', 'main')))
end)

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Dylan Malandain.
--- DateTime: 20/12/2019 19:07
---
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Dylan Malandain.
--- DateTime: 20/12/2019 19:07
---

RMenu.Add('adminmenu', 'main', RageUI.CreateMenu("Admin Menu", "Admin Menu by ZiiM", 1330))
RMenu:Get('adminmenu', 'main'):SetSubtitle("~b~Admin Menu")
RMenu:Get('adminmenu', 'main').EnableMouse = true
RMenu:Get('adminmenu', 'main').Closed = function()
    -- TODO Perform action
end;

RMenu.Add('adminmenu', 'carmenu', RageUI.CreateSubMenu(RMenu:Get('adminmenu', 'main'), "Vehicle Spawning", "~b~Admin Menu"))
RMenu:Get('adminmenu', 'carmenu').EnableMouse = true
---@type table
local foods = {
    "Banana",
    "Apple",
    "Pizza",
    "Quartilicious",
    "Steak",
    0xF00D,
}

local index = {
    ketchup = false;
    dish = 1;
    quantity = 0;
}

local vSpawning = {
    ColorIndex_One = 1,
    ColorIndex_Two = 1,
}


RageUI.CreateWhile(1.0, true , function()
    if RageUI.Visible(RMenu:Get('adminmenu', 'main')) then
        RageUI.DrawContent({header = true, glare = true, instructionalButton = true}, function()
            RageUI.Button("Vehicle Spawning", "Vehicle Spawning!", { RightLabel = "→→→" }, true, function(Hovered, Active, Selected) end, RMenu:Get('adminmenu', 'carmenu'))
        
        end, function()
        
        end)

    end

    if RageUI.Visible(RMenu:Get('adminmenu', 'carmenu')) then
        RageUI.DrawContent({header = true, glare = true, instructionalButton = true}, function()

        
        end, function()
            
            local pc = RageUI.PanelColour
            local Tbl = pc.HairCut
            RageUI.ColourPanel("Vehicle Colors", Tbl, vSpawning.ColorIndex_One, vSpawning.ColorIndex_Two, function(Hovered, Active, MinimumIndex, CurrentIndex)
                vSpawning.ColorIndex_One = MinimumIndex
                vSpawning.ColorIndex_Two = CurrentIndex
                local a,b,c = table.unpack(Tbl[CurrentIndex])
                RageUI.Text({
                    message = "Colours Panel | MinimumIndex : " .. MinimumIndex .. " CurrentIndex : " .. CurrentIndex .. " Hair: " .. a .. ", " .. b .. ", " .. c 
                })
            
            end)
        end)

    end

end)


-- RageUI.CreateWhile(1.0, true, function()

--     if IsControlJustPressed(1, 51) then
--         RageUI.Visible(RMenu:Get('showcase', 'main'), not RageUI.Visible(RMenu:Get('showcase', 'main')))
--     end

--     if RageUI.Visible(RMenu:Get('showcase', 'main')) then
--         RageUI.DrawContent({ header = true, glare = true, instructionalButton = true }, function()
--             ---Items
--             RageUI.Checkbox("Add ketchup ?", "Do you wish to add ketchup ?", index.ketchup, { Style = RageUI.CheckboxStyle.Tick }, function(Hovered, Selected, Active, Checked)
--                 if (Hovered) then

--                 end
--                 if (Active) then

--                 end
--                 if (Selected) then
--                     RageUI.Text({
--                         message = string.format("~r~Ketchup status: ~b~%s", tostring(index.ketchup))
--                     })
--                 end
--                 index.ketchup = Checked;
--             end)

--             RageUI.List("Food", foods, index.dish, "Select the type of food you want to eat.", {}, true, function(Hovered, Active, Selected, Index)
--                 if (Hovered) then

--                 end
--                 if (Active) then
--                     RageUI.Text({
--                         message = string.format("Preparing ~b~%s~w~...", foods[index.dish])
--                     })
--                 end
--                 if (Selected) then

--                 end
--                 index.dish = Index;
--             end)

--             RageUI.Slider("Quantity", index.quantity, 10, "Select the amount of food you want to eat.", false, { }, true, function(Hovered, Selected, Active, Index)
--                 if (Hovered) then

--                 end
--                 if (Selected) then
--                     RageUI.Text({
--                         message = string.format("Preparing ~r~%s ~b~%s(s)~w~...", index.quantity, foods[index.dish])
--                     })
--                 end
--                 if (Active) then

--                 end
--                 index.quantity = Index;
--             end)

--             RageUI.Button("Cook !", "Cook the dish with the appropriate ingredients and ketchup.", { RightBadge = RageUI.BadgeStyle.Tick }, true, function(Hovered, Active, Selected)
--                 if (Hovered) then

--                 end
--                 if (Active) then

--                 end
--                 if (Selected) then
--                     local string = string.format("You have ordered ~r~%s ~b~%s(s)~w~ ~r~with~w~ ketchup.", index.quantity, foods[index.dish])
--                     if not (index.ketchup) then
--                         string = string.format("You have ordered ~r~%s ~b~%s(s)~w~ ~r~without~w~ ketchup.", index.quantity, foods[index.dish])
--                     end
--                     RageUI.Text({
--                         message = string;
--                     })
--                 end
--             end)


--             RageUI.Button("Another Menu", "Sample description that takes more than one line. Moreso, it takes way more than two lines since it's so long. Wow, check out this length !", { RightLabel = "→→→" }, true, function(Hovered, Active, Selected)
--                 if (Hovered) then

--                 end
--                 if (Active) then

--                 end
--                 if (Selected) then

--                 end
--             end, RMenu:Get('showcase', 'submenu'))

--         end, function()
            
--             ---Panels
--         end)
--     end

--     if RageUI.Visible(RMenu:Get('showcase', 'submenu')) then
--         RageUI.DrawContent({ header = true, glare = true, instructionalButton = true }, function()
--             ---Items
--             RageUI.Checkbox("Colors Panel", description, panelShowcaseData.colors.enable, { Style = RageUI.CheckboxStyle.Tick }, function(Hovered, Selected, Active, Checked)
--                 panelShowcaseData.colors.enable = Checked
--             end)
--         end, function()
--             local pc = RageUI.PanelColour
--             RageUI.ColourPanel("Colors", pc.HairCut, panelShowcaseData.colors.index_one, panelShowcaseData.colors.index_two, function(Hovered, Active, MinimumIndex, CurrentIndex)
--                 panelShowcaseData.colors.index_one = MinimumIndex
--                 panelShowcaseData.colors.index_two = CurrentIndex

--                 RageUI.Text({
--                     message = "Colours Panel | MinimumIndex : " .. MinimumIndex .. " CurrentIndex : " .. CurrentIndex
--                 })
            
--             end)
--             ---Panels
--         end)
--     end

-- end, 1)

